// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // 1. Decodificar la señal de carga según la dirección
    // address[14] determina si es RAM (0) o dispositivos I/O (1)
    DMux(in=load, sel=address[14], a=loadRAM, b=loadIO);
    
    // address[13] determina si es Screen (0) o Keyboard (1) dentro de los dispositivos I/O
    DMux(in=loadIO, sel=address[13], a=loadScreen, b=loadKeyboard);
    
    // 2. Conectar los componentes de memoria
    
    // RAM16K: primeros 16K de direcciones (0x0000-0x3FFF)
    // Usa los 14 bits menos significativos para direccionar
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=ramOut);
    
    // Screen: siguiente bloque de 8K (0x4000-0x5FFF)
    // Usa 13 bits para direccionar sus 8K palabras
    Screen(in=in, load=loadScreen, address=address[0..12], out=screenOut);
    
    // Keyboard: solo un registro en 0x6000
    // No necesita dirección ni señal de carga
    Keyboard(out=kbdOut);
    
    // 3. Multiplexar la salida según la dirección
    
    // Seleccionar entre Screen y Keyboard basado en address[13]
    Mux16(a=screenOut, b=kbdOut, sel=address[13], out=ioOut);
    
    // Seleccionar entre RAM y dispositivos I/O basado en address[14]
    Mux16(a=ramOut, b=ioOut, sel=address[14], out=out);
}